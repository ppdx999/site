"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[4388],{1892:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var r=t(7624),i=t(2172);const o={sidebar_position:1},s="Tokenizer",a={id:"compiler/tokenizer",title:"Tokenizer",description:"Implementation sample",source:"@site/docs/compiler/tokenizer.md",sourceDirName:"compiler",slug:"/compiler/tokenizer",permalink:"/ja/docs/compiler/tokenizer",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/compiler/tokenizer.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"worksSidebar",previous:{title:"Overview",permalink:"/ja/docs/compiler/overview"},next:{title:"Parser",permalink:"/ja/docs/compiler/parser"}},l={},c=[{value:"Implementation sample",id:"implementation-sample",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",pre:"pre",...(0,i.M)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"tokenizer",children:"Tokenizer"}),"\n",(0,r.jsx)(n.h2,{id:"implementation-sample",children:"Implementation sample"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="tokenize.ts"',children:"type Token = {\n  type: 'Reserved' | 'Number' | 'EOF'\n  value: string\n  next: Token | null | undefined\n}\n\n\nfunction tokenize(input: string): Token {\n    let head = {\n        type: 'Reserved',\n        value: '',\n        next: null\n    }\n    let token = head\n    \n    while (!atEOF(input)) {\n        let char = input[current]\n        \n        if (char === '+') {\n            token.next = {\n                type: 'Reserved',\n                value: '+',\n                next: null\n            }\n        } else if (char === '-') {\n            token.next = {\n                type: 'Reserved',\n                value: '-',\n                next: null\n            }\n        } else if (/[0-9]/.test(char)) {\n            let value = ''\n            while (/[0-9]/.test(char)) {\n                value += char\n                char = input[++current]\n            }\n            token.next = {\n                type: 'Number',\n                value,\n                next: null\n            }\n        } else {\n            throw new Error('unexpected character')\n        }\n\n        token = token.next\n    }\n\n    token.next = {\n        type: 'EOF',\n        value: '',\n        next: null\n    }\n\n    return head.next\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.M)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);