"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[5416],{4216:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(7624),o=t(2172);const a={sidebar_position:2},d="Parser",s={id:"compiler/parser",title:"Parser",description:"Add and Sub Parser",source:"@site/docs/compiler/parser.md",sourceDirName:"compiler",slug:"/compiler/parser",permalink:"/ja/docs/compiler/parser",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/compiler/parser.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"worksSidebar",previous:{title:"Tokenizer",permalink:"/ja/docs/compiler/tokenizer"},next:{title:"Code Generation",permalink:"/ja/docs/compiler/codegen"}},i={},l=[{value:"Add and Sub Parser",id:"add-and-sub-parser",level:2},{value:"BNF",id:"bnf",level:3},{value:"AST",id:"ast",level:3},{value:"Implementation sample",id:"implementation-sample",level:3},{value:"Support Mul and Div",id:"support-mul-and-div",level:2},{value:"BNF",id:"bnf-1",level:3},{value:"AST",id:"ast-1",level:3},{value:"Implementation sample",id:"implementation-sample-1",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",mermaid:"mermaid",p:"p",pre:"pre",...(0,o.M)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"parser",children:"Parser"}),"\n",(0,r.jsx)(n.h2,{id:"add-and-sub-parser",children:"Add and Sub Parser"}),"\n",(0,r.jsx)(n.h3,{id:"bnf",children:"BNF"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ebnf",children:"expr ::= number ('+' number | '-' number)*\nnumber ::= [0-9]+\n"})}),"\n",(0,r.jsx)(n.h3,{id:"ast",children:"AST"}),"\n",(0,r.jsx)(n.p,{children:"ex) 1 + 2 - 3"}),"\n",(0,r.jsx)(n.mermaid,{value:"flowchart TD\n  expr --\x3e -\n  - --\x3e +\n  + --\x3e 1\n  + --\x3e 2\n\n  - --\x3e 3\n  3 --- ."}),"\n",(0,r.jsx)(n.h3,{id:"implementation-sample",children:"Implementation sample"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="parser.ts"',children:"type Node = {\n    type: 'number' | 'add' | 'sub',\n    value: string,\n    left: Node,\n    right: Node\n}\n\nfunction expr(token: Token): Node {\n    let node = number(token)\n\n    while (!atEOF(token)) {\n        if (consume(token, '+')) {\n            token = token.next\n            node = newNode('add', node, number(token))\n        } else if (consume(token, '-')) {\n            token = token.next\n            node = newNode('sub', node, number(token))\n        } else {\n            throw new Error('unexpected token')\n        }\n    }\n}\n\nfunction number(token: Token): Node {\n    return {\n        type: 'number',\n        value: token.value,\n        left: null,\n        right: null\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"support-mul-and-div",children:"Support Mul and Div"}),"\n",(0,r.jsx)(n.h3,{id:"bnf-1",children:"BNF"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ebnf",children:"expr ::= term ('+' term | '-' term)*\nterm ::= factor ('*' factor | '/' factor)*\nfactor ::= number\nnumber ::= [0-9]+\n"})}),"\n",(0,r.jsx)(n.h3,{id:"ast-1",children:"AST"}),"\n",(0,r.jsx)(n.p,{children:"ex) 1 + 2 * 3 - 4 / 5"}),"\n",(0,r.jsx)(n.mermaid,{value:"flowchart TD\n  expr --\x3e -\n  - --\x3e +\n  + --\x3e 1\n  + --\x3e *\n  * --\x3e 2\n  * --\x3e 3\n\n  - --\x3e /\n  / --\x3e 4\n  / --\x3e 5"}),"\n",(0,r.jsx)(n.h3,{id:"implementation-sample-1",children:"Implementation sample"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="parser.ts"',children:"function expr(token: Token): Node {\n    let node = term(token)\n\n    while (!atEOF(token)) {\n        if (consume(token, '+')) {\n            token = token.next\n            node = newNode('add', node, term(token))\n        } else if (consume(token, '-')) {\n            token = token.next\n            node = newNode('sub', node, term(token))\n        } else {\n            throw new Error('unexpected token')\n        }\n    }\n}\n\nfunction term(token: Token): Node {\n    let node = factor(token)\n\n    while (!atEOF(token)) {\n        if (consume(token, '*')) {\n            token = token.next\n            node = newNode('mul', node, factor(token))\n        } else if (consume(token, '/')) {\n            token = token.next\n            node = newNode('div', node, factor(token))\n        } else {\n            break\n        }\n    }\n\n    return node\n}\n\nfunction factor(token: Token): Node {\n    return number(token)\n}\n"})})]})}function m(e={}){const{wrapper:n}={...(0,o.M)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);